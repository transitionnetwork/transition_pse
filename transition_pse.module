<?php
/**
 * @file Transition Project Sharing Engine
 *
 * Needs mild refactoring:
 * @todo run through Coder.
 * @todo break out user stuff to .user.inc.
 * @todo move any text theme() functions (widget thanks, about) to .tpl.php?.
 * @todo clean up code paths.
 * @todo do a security audit.
 */

// The content type for PSE submissions
define('TRANSITION_PSE_CT', 'project_pse');

// Radius (miles) when searching for nearby projects
define('TRANSITION_PSE_RADIUS', '50');

// Mailchimp ID for Widget Owners mailing list
define('TRANSITION_PSE_MC_LID', '57fc02ca3d');

/**
 * Implementation of hook_init().
 *
 * Switches to the PSE the theme if we're viewing a widget page.
 */
function transition_pse_init() {
  global $custom_theme;
  // current page is a view or entry widget
  if (arg(0) == 'pse' && (arg(1) == 'view' || arg(1) == 'entry')) {
    $custom_theme = 'pse';
  }
  // or a pse callback for quicktabs
  if (arg(0) == 'quicktabs' && arg(1) == 'ajax' && arg(3) == 'pse') {
    $custom_theme = 'pse';
  }
}

/**
 * Implementation of hook_perm().
 */
function transition_pse_perm() {
  return array(
    'get widget code',
    'view submissions in moderation',
  );
}

/**
 * Implementation of hook_menu().
 */
function transition_pse_menu() {
  $items = array();
  // add page -- builds a variant of the node/add/[TRANSITION_PSE_CT] page with
  // unified reg/login first
  $items['pse/entry/add-project/%/%'] = array(
    // 'title' => 'Add your project',
    'page callback' => 'transition_pse_entry_form_steps',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'file' => 'transition_pse.pages.inc',
    'type' => MENU_CALLBACK,
  );
  // thanks page -- says thanks, shows their project, promotes TN
  $items['pse/entry/add-project/thank-you/%/%'] = array(
    // 'title' => 'Add your project',
    'page callback' => 'transition_pse_entry_thanks',
    'page arguments' => array(4, 5),
    'access arguments' => array('access content'),
    'file' => 'transition_pse.pages.inc',
    'type' => MENU_CALLBACK,
  );
  // view pages -- SIDEBAR
  $items['pse/view/sidebar/%/%'] = array(
    // 'title' => 'Add your project',
    'page callback' => 'transition_pse_view_sidebar',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'file' => 'transition_pse.pages.inc',
    'type' => MENU_CALLBACK,
  );
  // view pages -- FULL
  $items['pse/view/full/%/%'] = array(
    'title' => 'Transition Projects',
    'page callback' => 'transition_pse_view_full',
    'page arguments' => array(3, 4),
    'access arguments' => array('access content'),
    'file' => 'transition_pse.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['pse/view/full/search'] = array(
    'title' => 'Find projects',
    'page callback' => 'transition_pse_view_full_search',
    'access arguments' => array('access content'),
    'file' => 'transition_pse.pages.inc',
    'type' => MENU_CALLBACK,
  );
  // view pages -- about
  $items['pse/view/about'] = array(
    'title' => 'About the PSE',
    'page callback' => 'transition_pse_view_about',
    'access arguments' => array('access content'),
    'file' => 'transition_pse.pages.inc',
    'type' => MENU_CALLBACK,
  );
  // get widget code page
  $items['pse/widget/get'] = array(
    'title' => 'Get the Projects Widget!',
    'page callback' => 'transition_pse_widget_generate',
    'access arguments' => array('get widget code'),
    'file' => 'transition_pse.widget.inc',
    'type' => MENU_CALLBACK,
  );
  // accept project submission
  $items['pse/submission/%/accept'] = array(
    'title' => 'Accept project submission',
    'page callback' => 'transition_pse_submission_accept',
    'page arguments' => array(2),
    'access arguments' => array('get widget code'),
    'file' => 'transition_pse.moderation.inc',
    'type' => MENU_CALLBACK,
  );
  // reject project submission
  $items['pse/submission/%/reject'] = array(
    'title' => 'Reject project submission',
    'page callback' => 'transition_pse_submission_reject',
    'page arguments' => array(2),
    'access arguments' => array('get widget code'),
    'file' => 'transition_pse.moderation.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_form_alter()
 *
 * when _transition_pse_overriding_form_flag is set, this removes all
 * non-mandatory items from the User forms.
 *
 * Also ensures all widet-submitted content is flagged for moderation
 */
function transition_pse_form_alter(&$form, &$form_state, $form_id) {
  if (_transition_pse_overriding_form_flag() == TRUE) {
    switch ($form_id) {
      case "user_register":
        _transition_pse_hide_non_manadatory_elements($form);

        // hide username since it will be auto-created from first/last name on user save
        // but for now make it unique to get through safely
        $form['account']['name']['#type'] = 'hidden';
        $form['account']['name']['#default_value'] = 'PSEUSER--' . uniqid();
        unset($form['account']['pass']['#type']);

        // email tweak message
        $form['account']['mail']['#description'] = t('We will not use your email address for anything else, nor give it to anyone else. ') . $form['account']['mail']['#description'];

        // hide unneeded newsletter
        // @BUG see: https://tech.transitionnetwork.org/trac/ticket/447
        $form['mailchimp_list_forms']['wrapper1b720da06c']['#access'] = FALSE;

        // stop LoginToboggan doing its stuff
        $logintoboggan_index = array_search('logintoboggan_user_register_validate', $form['#validate']);
        if ($logintoboggan_user_login_validate !== FALSE) {
          unset($form['#validate'][$logintoboggan_index]);
        }

        // ensure we can build username on submit
        array_unshift($form['#submit'], 'transition_pse_user_register_submit');

        // remove field_roles_offered, field_initiative and field_themes from
        // display/validation
        $form['group_user_interest']['field_roles_offered']['#type'] = 'optionwidgets_select';
        $form['group_user_interest']['field_roles_offered']['#access'] = FALSE;
        unset($form['group_user_interest']['field_initiative']);
        unset($form['group_user_interest']['field_themes']);

        // and redirect to the thank you page when done
        $redirect_to = 'pse/entry/add-project' . '?login=' . uniqid();
        $_REQUEST['destination'] = $redirect_to;
        break;
    }
  }
}

/**
 * User registraton submit callback
 *
 * Builds a unique username based on first & last name, avoiding collisions
 */
function transition_pse_user_register_submit($form, &$form_state) {
  // build username from first & last names
  $first_name = $form_state['content_profile_registration']['profile']['node']->field_name_first[0]['value'];
  $last_name .= $form_state['content_profile_registration']['profile']['node']->field_name_last[0]['value'];
  // make alphanumeric only, set proper noun capitalisation
  $full_name = preg_replace("/[^a-zA-Z0-9]+/", "", $full_name);
  $full_name = ucwords(strtolower($first_name . ' ' . $last_name));
  // then ensure not too long after making space for 'counter' on end
  if (strlen($full_name) >= USERNAME_MAX_LENGTH - 3) $name = substr($name, 0, USERNAME_MAX_LENGTH - 3);

  // ensure username is unique
  $attempt = 0;
  $append = '';
  while (!$suceess && $attempt < 256) {
    // add attempt number to end of username if not unique - e.g. "John Smith 2"
    if ($attempt > 0) $append = ' ' . dechex($attempt);

    $result = db_query("SELECT name FROM {users} u WHERE u.name = '%s'", $full_name . $append);
    if (db_fetch_array($result) === FALSE) {
      // found a unique name, use it!
      $form_state['values']['name'] = $full_name . $append;
      break;
    }
    // otherwise carry on up to 0xff appended to name... or 256 chances.
    $attempt++;
  }
}

/**
 * Implementation of hook_user().
 *
 * Ensures PSE registration/login submits go back to entry PSE form.
 * Also builds a username from first and last name elements for PSE.
 */
function transition_pse_user($op, &$edit, &$account, $category = NULL) {
  // only for PSE entry widget
  if (arg(0) <> 'pse' || arg(1) <> 'entry') return;

  switch ($op) {
    case 'login':
    case 'register':
      // redirect login/form to itself for PSE only
      // build url with hex timestamp to minise caching issues
      $_REQUEST['destination'] = request_uri() . '?' . $op . '=' . uniqid();
      break;
  }
}

/**
 * Implementation of hook_locationapi().
 *
 * Location module... A lot of code just to change the title of the 'city' field,
 * but hey ho...
 */
function transition_pse_locationapi(&$obj, $op, $a3 = NULL, $a4 = NULL, $a5 = NULL) {
  if ($op == 'field_expand' ) {
    switch ($a3) {
      case 'city':
        return array(
          '#type'           => 'textfield',
          '#title'          => t('Nearest village/town/city'),
          '#default_value'  => $obj,
          '#size'           => 64,
          '#maxlength'      => 255,
          '#description'    => NULL,
          '#attributes'     => NULL,
          '#required'       => ($settings['collect'] == 2),
        );
        break;
      case 'postal_code':
        return array(
          '#type'           => 'textfield',
          '#title'          => t('Postal code'),
          '#description' => t('Postcode does not have to be exact; the first half is fine.'),
          '#default_value'  => $obj,
          '#size'           => 16,
          '#maxlength'      => 16,
          '#required'       => ($settings['collect'] == 2),
        );
        break;
    }
  }
}

/**
 * Implementation of hook_mail()
 */
function transition_pse_mail($key, &$message, $params) {
  module_load_include('inc', 'transition_pse', 'transition_pse.moderation');

  global $user;
  // set language from message
  $language = $message['language'];

  switch ($key) {
    case 'submitter_project_thanks':
      transition_pse_submitter_mail_text('thanks', $message, $params);
      break;
    case 'submitter_project_accepted':
      transition_pse_submitter_mail_text('accepted', $message, $params);
      break;
    case 'submitter_project_rejected':
      transition_pse_submitter_mail_text('rejected', $message, $params);
      break;
    case 'webmaster_submission_new':
      transition_pse_webmaster_mail_text('new', $message, $params);
      break;
    case 'webmaster_submission_reminder':
      transition_pse_webmaster_mail_text('reminder', $message, $params);
      break;
  }
}

/**
 * Implementation of hook_theme().
 */
function transition_pse_theme($existing, $type, $theme, $path) {
  $path = drupal_get_path('module', 'transition_pse') .'/theme';
  return array(
    'pse_widget_container' => array(
      'arguments' => array('type' => NULL, 'widget_urls' => NULL, 'assets' => NULL, 'options' => NULL),
      'file' => 'transition_pse.widget.inc',
    ),
    'pse_widget_page' => array(
      'template' => 'pse-page',
      'path' => $path,
      'arguments' => array('content' => NULL, 'header' => NULL, 'footer' => NULL),
    ),
    'pse_widget_page_header' => array(
      'template' => 'pse-page-header',
      'path' => $path,
      'arguments' => array('title' => NULL, 'tabs' => NULL),
    ),
    'pse_widget_page_tabs' => array(
      'template' => 'pse-page-tabs',
      'path' => $path,
      'arguments' => array('step' => NULL),
    ),
    'pse_widget_page_footer' => array(
      'template' => 'pse-page-footer',
      'path' => $path,
    ),
    'pse_widget_entry_container' => array(
      'arguments' => array('widget_urls' => NULL, 'options' => NULL),
      'file' => 'transition_pse.widget.inc',
    ),
    // thanks page
    'pse_widget_entry_thanks' => array(
      'file' => 'transition_pse.widget.inc',
    ),
    'pse_widget_entry_thanks_content' => array(
      'template' => 'pse-page-entry-thanks-content',
      'arguments' => array('submit_another_url' => NULL),
      'path' => $path,
    ),
    // widget structure
    'pse_widget_view_container' => array(
      'arguments' => array('type' => NULL, 'widget_urls' => NULL, 'options' => NULL),
      'file' => 'transition_pse.widget.inc',
    ),
    'pse_widget_view_inner' => array(
      'arguments' => array('content' => NULL),
      'file' => 'transition_pse.widget.inc',
    ),
    // about tab
    'pse_widget_view_about' => array(
      'template' => 'pse-page-view-about',
      'path' => $path,
    ),
  );
}

/**
 * template_preprocess function for pse_widget_page.tpl.php
 *
 * Adds $header and $footer theme calls to page
 */
function template_preprocess_pse_widget_page(&$vars) {
  // get step from args for tabs
  if (arg(3) == 'thank-you') {
    $step = 3;
  }
  elseif (user_is_logged_in()) {
    // logged in
    $step = 2;
  }
  else {
    $step = 1;
  }
  // build tabs
  $tabs = theme('pse_widget_page_tabs', $step);
  $vars['header'] = theme('pse_widget_page_header', drupal_get_title(), $tabs);
  $vars['footer'] = theme('pse_widget_page_footer');
}


/**
 * Wraps a static flag in a function so we know when we want to override a form
 */
function _transition_pse_overriding_form_flag($set = FALSE) {
  static $flag = FALSE;
  if ($set) $flag = TRUE;
  return $flag;
}